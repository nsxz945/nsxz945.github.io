{"meta":{"title":"nsxz's blog","subtitle":null,"description":null,"author":"John Doe","url":"https://nsxz945.github.io"},"pages":[],"posts":[{"title":"NodeSchool","slug":"NodeSchool","date":"2017-07-17T09:47:28.000Z","updated":"2017-07-17T09:51:35.000Z","comments":true,"path":"2017/07/17/NodeSchool/","link":"","permalink":"https://nsxz945.github.io/2017/07/17/NodeSchool/","excerpt":"","text":"lesson2在程序中，process.argv将返回一个数组，数组的第一个参数始终为node，第二个参数为程序的路径。从process.argv[2]开始为传入的参数。且传入的参数均为字符串。 lesson3 同步读取文件 使用import fs from &quot;fs&quot;或var fs = require(&#39;fs&#39;)引入filesystem 在fs中，同步的方法，均以Sync结尾。 Buffer对象是node处理文件的方式。使用toString()方法可以将其转为字符串。 lessson4 异步读取文件1234fs.readFile(file, function (err, data) &#123; if (err) &#123; return console.log(err)&#125; 代码中，fs.readFile接受两个参数，第一个是路径，第二个是回调函数。nodejs中的回调都是这个形式。 也可以使用 fs.readFile(file, ‘utf8’, callback)，第二个参数是文件编码 lesson5 ls过滤器 fs.readdir可以获取文件夹下文件列表，并返回一个数组。 path的用法 path.normalize(p) 123path.normalize(&apos;/foo/bar//baz/asdf/quux/..&apos;)// returns&apos;/foo/bar/baz/asdf&apos; 处理路径，考虑..(上一级文件夹)和.(同级文件夹)，返回最终路径。 path.join([path1], [path2], […]) 123path.join(&apos;/foo&apos;, &apos;bar&apos;, &apos;baz/asdf&apos;, &apos;quux&apos;, &apos;..&apos;)// returns&apos;/foo/bar/baz/asdf&apos; 将多个字符串合并为一个路径，并进行处理。处理方式与path.normalize相同。 path.resolve([from …], to) 1path.resolve(&apos;foo/bar&apos;, &apos;/tmp/file/&apos;, &apos;..&apos;, &apos;a/../subfile&apos;) 依次进入每个路径(相当于多条cd命令) path.relative(from, to) 得到相对路径 path.dirname 123path.dirname(&apos;/foo/bar/baz/asdf/quux&apos;)// returns&apos;/foo/bar/baz/asdf&apos; 得到上级路径 path.basename(p, [ext]) 得到路径的最后一部分。[ext]接受后缀名并对结果进行删去。 1234567path.basename(&apos;/foo/bar/baz/asdf/quux.html&apos;)// returns&apos;quux.html&apos;path.basename(&apos;/foo/bar/baz/asdf/quux.html&apos;, &apos;.html&apos;)// returns&apos;quux&apos; path.extname(p) 得到后缀名 path.sep 123&apos;foo/bar/baz&apos;.split(path.sep)// returns[&apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;] 将路径分为字符串，并返回一个数组 path.delimiter 提取由’:’或’;’分隔的多个路径，返回一个数组","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-04-28T02:07:56.000Z","updated":"2017-04-28T02:07:56.000Z","comments":true,"path":"2017/04/28/hello-world/","link":"","permalink":"https://nsxz945.github.io/2017/04/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}